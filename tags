!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_INIT_CAPACITY	bin/include/array.h	9;"	d
ARRAY_INIT_CAPACITY	c-stl/array.h	9;"	d
AS_LIST_ITEM	test/test-list.c	/^    AS_LIST_ITEM;$/;"	m	struct:sutd	file:	access:public
AS_MAP_ENTRY	test/test-map.c	/^    AS_MAP_ENTRY;$/;"	m	struct:_stud	file:	access:public
BUFFER_ORIGINAL_SIZE	epollet/buffer.c	4;"	d	file:
CLI_BUF_ORIGIN_SIZE	epollet/client_store.c	5;"	d	file:
DEFAULT_STACK_SZIE	uthread/uthread.h	25;"	d
DEFAULT_TABLE_SIZE	bin/include/map.h	16;"	d
DEFAULT_TABLE_SIZE	c-stl/map.h	16;"	d
FAILURE	common/common.h	8;"	d
Fun	uthread/uthread.h	/^typedef void (*Fun)(void *arg);$/;"	t
GLOBAL_BUF_ORIGIN_SIZE	epollet/epollet.c	17;"	d	file:
INVALID_SOCKET	common/common.h	13;"	d
MAX_CMDDATA_LEN	epollet/epollet.c	15;"	d	file:
MAX_EVENT_COUNT	epollet/epollet.c	14;"	d	file:
MAX_UDP_LENGTH	bin/include/hlnet.h	7;"	d
MAX_UDP_LENGTH	src/hlnet.h	7;"	d
MAX_UTHREAD_SIZE	uthread/uthread.h	26;"	d
MEM_ERROR	common/common.h	10;"	d
MY_UTHREAD_CPP	uthread/uthread.c	17;"	d	file:
MY_UTHREAD_H	uthread/uthread.h	17;"	d
NET_ERROR	common/common.h	11;"	d
NO	bin/include/queue.h	27;"	d
NO	c-stl/queue.h	27;"	d
NO	common/common.h	16;"	d
OP_ARRAY_FAILURE	bin/include/array.h	19;"	d
OP_ARRAY_FAILURE	c-stl/array.h	19;"	d
OP_ARRAY_SUCCESS	bin/include/array.h	18;"	d
OP_ARRAY_SUCCESS	c-stl/array.h	18;"	d
OP_LIST_FAIL	bin/include/list.h	18;"	d
OP_LIST_FAIL	c-stl/list.h	18;"	d
OP_LIST_SUCCESS	bin/include/list.h	17;"	d
OP_LIST_SUCCESS	c-stl/list.h	17;"	d
OP_MAP_FAILURE	bin/include/map.h	13;"	d
OP_MAP_FAILURE	c-stl/map.h	13;"	d
OP_MAP_SUCCESS	bin/include/map.h	12;"	d
OP_MAP_SUCCESS	c-stl/map.h	12;"	d
OP_QUEUE_FAIL	bin/include/queue.h	21;"	d
OP_QUEUE_FAIL	c-stl/queue.h	21;"	d
OP_QUEUE_FULL_ERROR	bin/include/queue.h	24;"	d
OP_QUEUE_FULL_ERROR	c-stl/queue.h	24;"	d
OP_QUEUE_MEM_ERROR	bin/include/queue.h	22;"	d
OP_QUEUE_MEM_ERROR	c-stl/queue.h	22;"	d
OP_QUEUE_PARAM_ERROR	bin/include/queue.h	23;"	d
OP_QUEUE_PARAM_ERROR	c-stl/queue.h	23;"	d
OP_QUEUE_SUCCESS	bin/include/queue.h	20;"	d
OP_QUEUE_SUCCESS	c-stl/queue.h	20;"	d
PARAM_ERROR	common/common.h	9;"	d
QUEUE_INIT_CAPACITY	c-stl/queue.c	6;"	d	file:
READ_PART_DATA	epollet/client_store.h	/^	READ_PART_DATA 		= 2				\/\/正在读数据$/;"	e	enum:read_part_e
READ_PART_HEAD	epollet/client_store.h	/^	READ_PART_HEAD 		= 1,			\/\/正在读包头$/;"	e	enum:read_part_e
SOCKTYPE_TCP_CLIENT	bin/include/hlnet.h	/^	SOCKTYPE_TCP_CLIENT = 1,			\/\/tcp方式(用户端)$/;"	e	enum:__anon1
SOCKTYPE_TCP_CLIENT	src/hlnet.h	/^	SOCKTYPE_TCP_CLIENT = 1,			\/\/tcp方式(用户端)$/;"	e	enum:__anon2
SOCKTYPE_TCP_MANAGE	bin/include/hlnet.h	/^	SOCKTYPE_TCP_MANAGE = 2,			\/\/tcp方式(管理端)$/;"	e	enum:__anon1
SOCKTYPE_TCP_MANAGE	src/hlnet.h	/^	SOCKTYPE_TCP_MANAGE = 2,			\/\/tcp方式(管理端)$/;"	e	enum:__anon2
SOCKTYPE_UDP	bin/include/hlnet.h	/^	SOCKTYPE_UDP = 3					\/\/udp方式$/;"	e	enum:__anon1
SOCKTYPE_UDP	src/hlnet.h	/^	SOCKTYPE_UDP = 3					\/\/udp方式$/;"	e	enum:__anon2
SUCCESS	common/common.h	7;"	d
THREAD_STATE_RUNNING	src/hlnet.c	/^	THREAD_STATE_RUNNING = 1,$/;"	e	enum:_thread_state	file:
THREAD_STATE_STOPPED	src/hlnet.c	/^	THREAD_STATE_STOPPED = 3$/;"	e	enum:_thread_state	file:
THREAD_STATE_STOPPING	src/hlnet.c	/^	THREAD_STATE_STOPPING = 2,$/;"	e	enum:_thread_state	file:
UDP_BUFFER_SIZE	src/hlnet.c	11;"	d	file:
UTHREAD_ERR_ERROR	uthread/uthread.h	30;"	d
UTHREAD_ERR_SUCCESS	uthread/uthread.h	29;"	d
UTHREAD_STATE_FREE	uthread/uthread.h	/^	UTHREAD_STATE_FREE,					\/\/空闲$/;"	e	enum:uthread_state
UTHREAD_STATE_READY	uthread/uthread.h	/^	UTHREAD_STATE_READY,				\/\/就绪$/;"	e	enum:uthread_state
UTHREAD_STATE_RUNNING	uthread/uthread.h	/^	UTHREAD_STATE_RUNNING,				\/\/运行$/;"	e	enum:uthread_state
UTHREAD_STATE_SUSPEND	uthread/uthread.h	/^	UTHREAD_STATE_SUSPEND				\/\/暂停$/;"	e	enum:uthread_state
YES	bin/include/queue.h	26;"	d
YES	c-stl/queue.h	26;"	d
YES	common/common.h	15;"	d
_ALGORITHM_H_	common/algorithm.h	2;"	d
_BUFFER_H_	epollet/buffer.h	2;"	d
_CLIENT_H_	epollet/client_store.h	2;"	d
_COMMON_H_	common/common.h	2;"	d
_DATABASE_H_	src/database.h	2;"	d
_EPOLLET_H_	epollet/epollet.h	2;"	d
_QUEUE_H_	bin/include/queue.h	8;"	d
_QUEUE_H_	c-stl/queue.h	8;"	d
_SERVER_H_	bin/include/hlnet.h	2;"	d
_SERVER_H_	src/hlnet.h	2;"	d
_STORE_H_	epollet/store.h	2;"	d
_XOPEN_SOURCE	uthread/uthread.h	20;"	d
__ARRAY_H_	bin/include/array.h	7;"	d
__ARRAY_H_	c-stl/array.h	7;"	d
__LIST_H_	bin/include/list.h	7;"	d
__LIST_H_	c-stl/list.h	7;"	d
__MAP_H_	bin/include/map.h	2;"	d
__MAP_H_	c-stl/map.h	2;"	d
__list_size	bin/include/list.h	/^    size_t __list_size;$/;"	m	struct:_list	access:public
__list_size	c-stl/list.h	/^    size_t __list_size;$/;"	m	struct:_list	access:public
__map_size	bin/include/map.h	/^    size_t __map_size;$/;"	m	struct:_map	access:public
__map_size	c-stl/map.h	/^    size_t __map_size;$/;"	m	struct:_map	access:public
_array	bin/include/array.h	/^typedef struct _array$/;"	s
_array	c-stl/array.h	/^typedef struct _array$/;"	s
_array::capacity	bin/include/array.h	/^    size_t capacity;$/;"	m	struct:_array	access:public
_array::capacity	c-stl/array.h	/^    size_t capacity;$/;"	m	struct:_array	access:public
_array::size	bin/include/array.h	/^    size_t size;$/;"	m	struct:_array	access:public
_array::size	c-stl/array.h	/^    size_t size;$/;"	m	struct:_array	access:public
_array::table	bin/include/array.h	/^    void **table;$/;"	m	struct:_array	access:public
_array::table	c-stl/array.h	/^    void **table;$/;"	m	struct:_array	access:public
_buffer	epollet/buffer.h	/^typedef struct _buffer$/;"	s
_buffer::buf	epollet/buffer.h	/^	char		*buf;			\/\/起始地址指针$/;"	m	struct:_buffer	access:public
_buffer::end	epollet/buffer.h	/^	uint32_t	end;			\/\/尾索引$/;"	m	struct:_buffer	access:public
_buffer::len	epollet/buffer.h	/^	uint32_t	len;			\/\/数据已占用的总长度$/;"	m	struct:_buffer	access:public
_buffer::read	epollet/buffer.h	/^	uint32_t	read;			\/\/读索引$/;"	m	struct:_buffer	access:public
_buffer::size	epollet/buffer.h	/^	uint32_t	size;			\/\/缓冲区大小$/;"	m	struct:_buffer	access:public
_buffer::write	epollet/buffer.h	/^	uint32_t	write;			\/\/写索引$/;"	m	struct:_buffer	access:public
_client	epollet/client_store.h	/^typedef struct _client$/;"	s
_client::as_list_item	epollet/client_store.h	/^	as_list_item;$/;"	m	struct:_client	access:public
_client::fd	epollet/client_store.h	/^	int					fd;				\/\/socket文件描述符$/;"	m	struct:_client	access:public
_client::id	epollet/client_store.h	/^	uint32_t			id;				\/\/套接字对应的内部使用索引号$/;"	m	struct:_client	access:public
_client::in	epollet/client_store.h	/^	buffer				*in;			\/\/读缓冲区$/;"	m	struct:_client	access:public
_client::ip	epollet/client_store.h	/^	uint32_t			ip;				\/\/客户端IP地址$/;"	m	struct:_client	access:public
_client::out	epollet/client_store.h	/^	buffer				*out;			\/\/写缓冲区$/;"	m	struct:_client	access:public
_client::parent	epollet/client_store.h	/^	int 				parent;			\/\/所属的父文件描述符$/;"	m	struct:_client	access:public
_client::status	epollet/client_store.h	/^	read_status_t		status;			\/\/读状态$/;"	m	struct:_client	access:public
_cmd_head	common/common.h	/^typedef struct _cmd_head$/;"	s
_cmd_head::cmd_code	common/common.h	/^	uint16_t		cmd_code;			\/\/命令码$/;"	m	struct:_cmd_head	access:public
_cmd_head::data_size	common/common.h	/^	uint32_t		data_size;			\/\/数据大小$/;"	m	struct:_cmd_head	access:public
_cmd_head::proto_ver	common/common.h	/^	uint16_t		proto_ver;			\/\/协议版本号$/;"	m	struct:_cmd_head	access:public
_cpu_stat	test/cpu_mem_stat.h	/^typedef struct _cpu_stat$/;"	s
_cpu_stat::all	test/cpu_mem_stat.h	/^	uint32_t all;		\/\/总的时间$/;"	m	struct:_cpu_stat	access:public
_cpu_stat::usage	test/cpu_mem_stat.h	/^	uint32_t usage;		\/\/已用时间$/;"	m	struct:_cpu_stat	access:public
_dbqueue_item	src/database.h	/^typedef struct _dbqueue_item$/;"	s
_dbqueue_item::buf	src/database.h	/^	buffer				buf;				\/\/数据缓冲区$/;"	m	struct:_dbqueue_item	access:public
_dbqueue_item::cmd	src/database.h	/^	uint16_t			cmd;				\/\/命令码	$/;"	m	struct:_dbqueue_item	access:public
_list	bin/include/list.h	/^typedef struct _list$/;"	s
_list	c-stl/list.h	/^typedef struct _list$/;"	s
_list::__list_size	bin/include/list.h	/^    size_t __list_size;$/;"	m	struct:_list	access:public
_list::__list_size	c-stl/list.h	/^    size_t __list_size;$/;"	m	struct:_list	access:public
_list::head	bin/include/list.h	/^    list_item *head;$/;"	m	struct:_list	access:public
_list::head	c-stl/list.h	/^    list_item *head;$/;"	m	struct:_list	access:public
_list::inited	bin/include/list.h	/^    unsigned char inited;$/;"	m	struct:_list	access:public
_list::inited	c-stl/list.h	/^    unsigned char inited;$/;"	m	struct:_list	access:public
_list::tail	bin/include/list.h	/^    list_item *tail;$/;"	m	struct:_list	access:public
_list::tail	c-stl/list.h	/^    list_item *tail;$/;"	m	struct:_list	access:public
_list_item	bin/include/list.h	/^typedef struct _list_item$/;"	s
_list_item	c-stl/list.h	/^typedef struct _list_item$/;"	s
_list_item::next	bin/include/list.h	/^    struct _list_item *next;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
_list_item::next	c-stl/list.h	/^    struct _list_item *next;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
_list_item::prev	bin/include/list.h	/^    struct _list_item *prev;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
_list_item::prev	c-stl/list.h	/^    struct _list_item *prev;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
_map	bin/include/map.h	/^typedef struct _map$/;"	s
_map	c-stl/map.h	/^typedef struct _map$/;"	s
_map::__map_size	bin/include/map.h	/^    size_t __map_size;$/;"	m	struct:_map	access:public
_map::__map_size	c-stl/map.h	/^    size_t __map_size;$/;"	m	struct:_map	access:public
_map::conflict	bin/include/map.h	/^    size_t conflict; \/\/ conflict times.$/;"	m	struct:_map	access:public
_map::conflict	c-stl/map.h	/^    size_t conflict; \/\/ conflict times.$/;"	m	struct:_map	access:public
_map::hash	bin/include/map.h	/^    unsigned int (*hash)(char*, int);$/;"	m	struct:_map	access:public
_map::hash	c-stl/map.h	/^    unsigned int (*hash)(char*, int);$/;"	m	struct:_map	access:public
_map::puts	bin/include/map.h	/^    size_t puts; \/\/ put operate times.$/;"	m	struct:_map	access:public
_map::puts	c-stl/map.h	/^    size_t puts; \/\/ put operate times.$/;"	m	struct:_map	access:public
_map::table	bin/include/map.h	/^    map_entry **table;$/;"	m	struct:_map	access:public
_map::table	c-stl/map.h	/^    map_entry **table;$/;"	m	struct:_map	access:public
_map::table_size	bin/include/map.h	/^    unsigned int table_size;$/;"	m	struct:_map	access:public
_map::table_size	c-stl/map.h	/^    unsigned int table_size;$/;"	m	struct:_map	access:public
_map_entry	bin/include/map.h	/^typedef struct _map_entry$/;"	s
_map_entry	c-stl/map.h	/^typedef struct _map_entry$/;"	s
_map_entry::hashcode	bin/include/map.h	/^    unsigned int 		hashcode;$/;"	m	struct:_map_entry	access:public
_map_entry::hashcode	c-stl/map.h	/^    unsigned int 		hashcode;$/;"	m	struct:_map_entry	access:public
_map_entry::key	bin/include/map.h	/^    char 				*key;$/;"	m	struct:_map_entry	access:public
_map_entry::key	c-stl/map.h	/^    char 				*key;$/;"	m	struct:_map_entry	access:public
_map_entry::key_size	bin/include/map.h	/^    int 				key_size;$/;"	m	struct:_map_entry	access:public
_map_entry::key_size	c-stl/map.h	/^    int 				key_size;$/;"	m	struct:_map_entry	access:public
_map_entry::next	bin/include/map.h	/^    struct _map_entry 	*next;$/;"	m	struct:_map_entry	typeref:struct:_map_entry::_map_entry	access:public
_map_entry::next	c-stl/map.h	/^    struct _map_entry 	*next;$/;"	m	struct:_map_entry	typeref:struct:_map_entry::_map_entry	access:public
_mem_stat	test/cpu_mem_stat.h	/^typedef struct _mem_stat$/;"	s
_mem_stat::free	test/cpu_mem_stat.h	/^	uint32_t free;		\/\/空闲大小$/;"	m	struct:_mem_stat	access:public
_mem_stat::total	test/cpu_mem_stat.h	/^	uint32_t total;		\/\/总大小$/;"	m	struct:_mem_stat	access:public
_packet_head	common/common.h	/^typedef struct _packet_head$/;"	s
_packet_head::client_id	common/common.h	/^	uint32_t 		client_id;			\/\/客户端编号	$/;"	m	struct:_packet_head	access:public
_packet_head::head	common/common.h	/^	cmd_head_t		head;				\/\/网络数据包头$/;"	m	struct:_packet_head	access:public
_queue	bin/include/queue.h	/^typedef struct _queue$/;"	s
_queue	c-stl/queue.h	/^typedef struct _queue$/;"	s
_queue::capacity	bin/include/queue.h	/^	int 			capacity;			\/\/总容积$/;"	m	struct:_queue	access:public
_queue::capacity	c-stl/queue.h	/^	int 			capacity;			\/\/总容积$/;"	m	struct:_queue	access:public
_queue::head	bin/include/queue.h	/^	int 			head;				\/\/队列头$/;"	m	struct:_queue	access:public
_queue::head	c-stl/queue.h	/^	int 			head;				\/\/队列头$/;"	m	struct:_queue	access:public
_queue::size	bin/include/queue.h	/^	int 			size;				\/\/已使用大小$/;"	m	struct:_queue	access:public
_queue::size	c-stl/queue.h	/^	int 			size;				\/\/已使用大小$/;"	m	struct:_queue	access:public
_queue::table	bin/include/queue.h	/^	void 			**table;			\/\/队列数据区$/;"	m	struct:_queue	access:public
_queue::table	c-stl/queue.h	/^	void 			**table;			\/\/队列数据区$/;"	m	struct:_queue	access:public
_queue::tail	bin/include/queue.h	/^	int 			tail;				\/\/队列尾$/;"	m	struct:_queue	access:public
_queue::tail	c-stl/queue.h	/^	int 			tail;				\/\/队列尾$/;"	m	struct:_queue	access:public
_read_status	epollet/client_store.h	/^typedef struct _read_status$/;"	s
_read_status::need	epollet/client_store.h	/^	uint16_t			need;			\/\/未读完的字节数$/;"	m	struct:_read_status	access:public
_read_status::part	epollet/client_store.h	/^	uint8_t				part;			\/\/正在读的部分，参见枚举：read_status_e$/;"	m	struct:_read_status	access:public
_read_status::reserve	epollet/client_store.h	/^	uint8_t				reserve;		\/\/保留字段 $/;"	m	struct:_read_status	access:public
_schedule_t	uthread/uthread.h	/^typedef struct _schedule_t$/;"	s
_schedule_t::main	uthread/uthread.h	/^    ucontext_t main;$/;"	m	struct:_schedule_t	access:public
_schedule_t::max_index	uthread/uthread.h	/^    int max_index; 				\/\/ 曾经使用到的最大的index + 1$/;"	m	struct:_schedule_t	access:public
_schedule_t::running_thread	uthread/uthread.h	/^    int running_thread;$/;"	m	struct:_schedule_t	access:public
_schedule_t::threads	uthread/uthread.h	/^    uthread_t *threads;$/;"	m	struct:_schedule_t	access:public
_stud	test/test-array.c	/^typedef struct _stud$/;"	s	file:
_stud	test/test-map.c	/^typedef struct _stud$/;"	s	file:
_stud::AS_MAP_ENTRY	test/test-map.c	/^    AS_MAP_ENTRY;$/;"	m	struct:_stud	file:	access:public
_stud::id	test/test-array.c	/^    int id;$/;"	m	struct:_stud	file:	access:public
_stud::id	test/test-map.c	/^    int id;$/;"	m	struct:_stud	file:	access:public
_stud::name	test/test-array.c	/^    char *name;$/;"	m	struct:_stud	file:	access:public
_stud::name	test/test-map.c	/^    char *name;$/;"	m	struct:_stud	file:	access:public
_stud::score	test/test-array.c	/^    int score;$/;"	m	struct:_stud	file:	access:public
_stud::score	test/test-map.c	/^    int score;$/;"	m	struct:_stud	file:	access:public
_thread_state	src/hlnet.c	/^typedef enum _thread_state$/;"	g	file:
_uthread_arg	uthread/uthread.c	/^typedef struct _uthread_arg$/;"	s	file:
_uthread_arg::parameter	uthread/uthread.c	/^	void				*parameter;			\/\/参数$/;"	m	struct:_uthread_arg	file:	access:public
_uthread_arg::schedule	uthread/uthread.c	/^	schedule_t			*schedule;			\/\/所属调度器$/;"	m	struct:_uthread_arg	file:	access:public
all	test/cpu_mem_stat.h	/^	uint32_t all;		\/\/总的时间$/;"	m	struct:_cpu_stat	access:public
arg	uthread/uthread.h	/^    void *arg;$/;"	m	struct:uthread_t	access:public
array	bin/include/array.h	/^}array;$/;"	t	typeref:struct:_array
array	c-stl/array.h	/^}array;$/;"	t	typeref:struct:_array
array_find	bin/include/array.h	24;"	d
array_find	c-stl/array.h	24;"	d
array_foreach	bin/include/array.h	26;"	d
array_foreach	c-stl/array.h	26;"	d
array_free_deep	bin/include/array.h	/^void array_free_deep(array *array);$/;"	p	signature:(array *array)
array_free_deep	c-stl/array.c	/^void array_free_deep(array *array)$/;"	f	signature:(array *array)
array_free_deep	c-stl/array.h	/^void array_free_deep(array *array);$/;"	p	signature:(array *array)
array_free_shallow	bin/include/array.h	/^void array_free_shallow(array *array);$/;"	p	signature:(array *array)
array_free_shallow	c-stl/array.c	/^void array_free_shallow(array *array)$/;"	f	signature:(array *array)
array_free_shallow	c-stl/array.h	/^void array_free_shallow(array *array);$/;"	p	signature:(array *array)
array_index_of	bin/include/array.h	/^int array_index_of(array *array, void *item);$/;"	p	signature:(array *array, void *item)
array_index_of	c-stl/array.c	/^int array_index_of(array *array, void *item)$/;"	f	signature:(array *array, void *item)
array_index_of	c-stl/array.h	/^int array_index_of(array *array, void *item);$/;"	p	signature:(array *array, void *item)
array_init	bin/include/array.h	/^int array_init(array *array, size_t capacity);$/;"	p	signature:(array *array, size_t capacity)
array_init	c-stl/array.c	/^int array_init(array *array, size_t capacity)$/;"	f	signature:(array *array, size_t capacity)
array_init	c-stl/array.h	/^int array_init(array *array, size_t capacity);$/;"	p	signature:(array *array, size_t capacity)
array_insert_before	bin/include/array.h	/^int array_insert_before(array *array, int index, void *item);$/;"	p	signature:(array *array, int index, void *item)
array_insert_before	c-stl/array.c	/^int array_insert_before(array *array, int index, void *item)$/;"	f	signature:(array *array, int index, void *item)
array_insert_before	c-stl/array.h	/^int array_insert_before(array *array, int index, void *item);$/;"	p	signature:(array *array, int index, void *item)
array_push_back	bin/include/array.h	/^int array_push_back(array *array, void *item);$/;"	p	signature:(array *array, void *item)
array_push_back	c-stl/array.c	/^int array_push_back(array *array, void *item)$/;"	f	signature:(array *array, void *item)
array_push_back	c-stl/array.h	/^int array_push_back(array *array, void *item);$/;"	p	signature:(array *array, void *item)
array_remove_by_index	bin/include/array.h	/^void *array_remove_by_index(array *array, int index);$/;"	p	signature:(array *array, int index)
array_remove_by_index	c-stl/array.c	/^void *array_remove_by_index(array *array, int index)$/;"	f	signature:(array *array, int index)
array_remove_by_index	c-stl/array.h	/^void *array_remove_by_index(array *array, int index);$/;"	p	signature:(array *array, int index)
array_remove_first	bin/include/array.h	/^void *array_remove_first(array *array);$/;"	p	signature:(array *array)
array_remove_first	c-stl/array.c	/^void *array_remove_first(array *array)$/;"	f	signature:(array *array)
array_remove_first	c-stl/array.h	/^void *array_remove_first(array *array);$/;"	p	signature:(array *array)
array_remove_last	bin/include/array.h	/^void *array_remove_last(array *array);$/;"	p	signature:(array *array)
array_remove_last	c-stl/array.c	/^void *array_remove_last(array *array)$/;"	f	signature:(array *array)
array_remove_last	c-stl/array.h	/^void *array_remove_last(array *array);$/;"	p	signature:(array *array)
array_size	bin/include/array.h	22;"	d
array_size	c-stl/array.h	22;"	d
as_list_item	bin/include/list.h	15;"	d
as_list_item	c-stl/list.h	15;"	d
as_list_item	epollet/client_store.h	/^	as_list_item;$/;"	m	struct:_client	access:public
as_map_item	bin/include/map.h	9;"	d
as_map_item	c-stl/map.h	9;"	d
buf	epollet/buffer.h	/^	char		*buf;			\/\/起始地址指针$/;"	m	struct:_buffer	access:public
buf	src/database.h	/^	buffer				buf;				\/\/数据缓冲区$/;"	m	struct:_dbqueue_item	access:public
buffer	epollet/buffer.h	/^}buffer, *pbuffer;$/;"	t	typeref:struct:_buffer
buffer_free	epollet/buffer.h	54;"	d
buffer_init	epollet/buffer.c	/^int buffer_init(buffer *buf, uint32_t size)$/;"	f	signature:(buffer *buf, uint32_t size)
buffer_init	epollet/buffer.h	/^int buffer_init(buffer *buf, uint32_t size);$/;"	p	signature:(buffer *buf, uint32_t size)
buffer_read	epollet/buffer.h	38;"	d
buffer_realloc	epollet/buffer.c	/^int buffer_realloc(buffer *buf, uint32_t new_size)$/;"	f	signature:(buffer *buf, uint32_t new_size)
buffer_rectify	epollet/buffer.c	/^int buffer_rectify(buffer *buf, uint32_t need)$/;"	f	signature:(buffer *buf, uint32_t need)
buffer_rectify	epollet/buffer.h	/^int buffer_rectify(buffer *buf, uint32_t need);$/;"	p	signature:(buffer *buf, uint32_t need)
buffer_reset	epollet/buffer.h	45;"	d
buffer_write	epollet/buffer.c	/^int buffer_write(buffer *buf, char* src, uint32_t len)$/;"	f	signature:(buffer *buf, char* src, uint32_t len)
buffer_write	epollet/buffer.h	/^int buffer_write(buffer *buf, char *src, uint32_t len);$/;"	p	signature:(buffer *buf, char *src, uint32_t len)
buffer_write_int	epollet/buffer.c	/^int buffer_write_int(buffer *buf, int num)$/;"	f	signature:(buffer *buf, int num)
buffer_write_int	epollet/buffer.h	/^int buffer_write_int(buffer *buf, int num);$/;"	p	signature:(buffer *buf, int num)
capacity	bin/include/array.h	/^    size_t capacity;$/;"	m	struct:_array	access:public
capacity	bin/include/queue.h	/^	int 			capacity;			\/\/总容积$/;"	m	struct:_queue	access:public
capacity	c-stl/array.h	/^    size_t capacity;$/;"	m	struct:_array	access:public
capacity	c-stl/queue.h	/^	int 			capacity;			\/\/总容积$/;"	m	struct:_queue	access:public
circle_recv	epollet/epollet.c	/^int circle_recv(int fd, char *buf, int len)$/;"	f	signature:(int fd, char *buf, int len)
circle_recv	epollet/epollet.h	/^int circle_recv(int fd, char *buf, int len);$/;"	p	signature:(int fd, char *buf, int len)
circle_send	epollet/epollet.c	/^int circle_send(int fd, char *buf, int len)$/;"	f	signature:(int fd, char *buf, int len)
circle_send	epollet/epollet.h	/^int circle_send(int fd, char *buf, int len);$/;"	p	signature:(int fd, char *buf, int len)
client_free	epollet/client_store.h	18;"	d
client_id	common/common.h	/^	uint32_t 		client_id;			\/\/客户端编号	$/;"	m	struct:_packet_head	access:public
client_init	epollet/client_store.c	/^int client_init(client_t *cli, int size)$/;"	f	signature:(client_t *cli, int size)
client_init	epollet/client_store.h	/^int client_init(client_t *cli, int size);$/;"	p	signature:(client_t *cli, int size)
client_reset	epollet/client_store.h	9;"	d
client_store_free	epollet/client_store.c	/^void client_store_free()$/;"	f
client_store_free	epollet/client_store.h	/^void client_store_free();$/;"	p	signature:()
client_store_init	epollet/client_store.c	/^int client_store_init()$/;"	f
client_store_init	epollet/client_store.h	/^int client_store_init();$/;"	p	signature:()
client_t	epollet/client_store.h	/^}client_t, *pclient;$/;"	t	typeref:struct:_client
close_socket	epollet/epollet.c	/^void close_socket(struct epoll_event *ev)$/;"	f	signature:(struct epoll_event *ev)
close_socket	epollet/epollet.h	/^void close_socket(struct epoll_event *ev);$/;"	p	signature:(struct epoll_event *ev)
cmd	src/database.h	/^	uint16_t			cmd;				\/\/命令码	$/;"	m	struct:_dbqueue_item	access:public
cmd_code	common/common.h	/^	uint16_t		cmd_code;			\/\/命令码$/;"	m	struct:_cmd_head	access:public
cmd_head_t	common/common.h	/^}cmd_head_t, *pcmd_head;$/;"	t	typeref:struct:_cmd_head
conflict	bin/include/map.h	/^    size_t conflict; \/\/ conflict times.$/;"	m	struct:_map	access:public
conflict	c-stl/map.h	/^    size_t conflict; \/\/ conflict times.$/;"	m	struct:_map	access:public
context_test	test/test-uthread.c	/^void context_test()$/;"	f
cpu_stat	test/cpu_mem_stat.h	/^}cpu_stat;$/;"	t	typeref:struct:_cpu_stat
create_tcp_client	src/hlnet.c	/^int create_tcp_client(uint16_t port)$/;"	f	signature:(uint16_t port)
create_tcp_manage	src/hlnet.c	/^int create_tcp_manage(uint16_t port)$/;"	f	signature:(uint16_t port)
create_tcp_socket	epollet/epollet.c	/^int create_tcp_socket(uint16_t port)$/;"	f	signature:(uint16_t port)
create_tcp_socket	epollet/epollet.h	/^int create_tcp_socket(uint16_t port);$/;"	p	signature:(uint16_t port)
create_udp	src/hlnet.c	/^int create_udp(uint16_t port)$/;"	f	signature:(uint16_t port)
create_udp_socket	epollet/epollet.c	/^int create_udp_socket(uint16_t port)$/;"	f	signature:(uint16_t port)
create_udp_socket	epollet/epollet.h	/^int create_udp_socket(uint16_t port);$/;"	p	signature:(uint16_t port)
cstl_dir	Makefile	/^cstl_dir = .\/c-stl$/;"	m
ctx	uthread/uthread.h	/^    ucontext_t ctx;$/;"	m	struct:uthread_t	access:public
data_size	common/common.h	/^	uint32_t		data_size;			\/\/数据大小$/;"	m	struct:_cmd_head	access:public
dbmsg_hander	common/common.h	/^typedef int (*dbmsg_hander)(cmd_head_t *head, char *data);$/;"	t
dbqueue_item_t	src/database.h	/^}dbqueue_item_t, *pdbqueue_item_t;$/;"	t	typeref:struct:_dbqueue_item
dbthread_run	src/database.c	/^int dbthread_run(void *args)$/;"	f	signature:(void *args)
end	epollet/buffer.h	/^	uint32_t	end;			\/\/尾索引$/;"	m	struct:_buffer	access:public
epollet_add	epollet/epollet.c	/^int epollet_add(int fd, void *data_ptr, int flag)$/;"	f	signature:(int fd, void *data_ptr, int flag)
epollet_add	epollet/epollet.h	/^int epollet_add(int fd, void *data_ptr, int flag);$/;"	p	signature:(int fd, void *data_ptr, int flag)
epollet_create	epollet/epollet.c	/^int epollet_create()$/;"	f
epollet_create	epollet/epollet.h	/^int epollet_create();$/;"	p	signature:()
epollet_dir	Makefile	/^epollet_dir = .\/epollet$/;"	m
epollet_run	epollet/epollet.c	/^int epollet_run(void *arg)$/;"	f	signature:(void *arg)
epollet_run	epollet/epollet.h	/^int epollet_run(void *arg);$/;"	p	signature:(void *arg)
extract_client	epollet/client_store.c	/^client_t *extract_client()$/;"	f
extract_client	epollet/client_store.h	/^client_t *extract_client();$/;"	p	signature:()
fd	epollet/client_store.h	/^	int					fd;				\/\/socket文件描述符$/;"	m	struct:_client	access:public
free	test/cpu_mem_stat.h	/^	uint32_t free;		\/\/空闲大小$/;"	m	struct:_mem_stat	access:public
func	uthread/uthread.h	/^    Fun func;$/;"	m	struct:uthread_t	access:public
func1	test/test-uthread.c	/^void func1(void * arg)$/;"	f	signature:(void * arg)
func2	test/test-uthread.c	/^void func2(void * arg)$/;"	f	signature:(void * arg)
func3	test/test-uthread.c	/^void func3(void *arg)$/;"	f	signature:(void *arg)
func4	test/test-uthread.c	/^void func4(void *arg)$/;"	f	signature:(void *arg)
g_client_buf	epollet/epollet.h	/^buffer				*g_client_buf = NULL;					\/\/数据队列(用户端)$/;"	v
g_client_free	epollet/client_store.c	/^list			*g_client_free = NULL;						\/\/空闲的客户端链表$/;"	v
g_client_link	epollet/epollet.h	/^link_hander			g_client_link = NULL;					\/\/连接事件函数指针(用户端)$/;"	v
g_client_shut	epollet/epollet.h	/^shut_hander			g_client_shut = NULL;					\/\/断开事件函数指针(用户端)$/;"	v
g_client_store	epollet/client_store.c	/^array			*g_client_store = NULL;						\/\/存储所有的客户端$/;"	v
g_client_tcp_fd	epollet/epollet.h	/^int 				g_client_tcp_fd = INVALID_SOCKET;		\/\/监听的套接字ID(用户端)$/;"	v
g_dbmsg_map	src/database.c	/^map						*g_dbmsg_map = NULL;					\/\/数据库消息映射$/;"	v
g_dbqueue	src/database.c	/^queue					*g_dbqueue = NULL;$/;"	v
g_epoll_fd	epollet/epollet.c	/^int 				g_epoll_fd = INVALID_SOCKET;			\/\/epoll元套接字$/;"	v
g_events	epollet/epollet.c	/^struct epoll_event  *g_events = NULL;						\/\/事件数组指针 $/;"	v	typeref:struct:epoll_event
g_manage_buf	epollet/epollet.h	/^buffer				*g_manage_buf = NULL;					\/\/数据队列(管理端)$/;"	v
g_manage_link	epollet/epollet.h	/^link_hander			g_manage_link = NULL;					\/\/连接事件函数指针(管理端)$/;"	v
g_manage_shut	epollet/epollet.h	/^shut_hander			g_manage_shut = NULL;					\/\/断开事件函数指针(管理端)$/;"	v
g_manage_tcp_fd	epollet/epollet.h	/^int 				g_manage_tcp_fd = INVALID_SOCKET;		\/\/监听的套接字ID(管理端)$/;"	v
g_net_client_msg	src/hlnet.c	/^map						*g_net_client_msg = NULL;				\/\/网络消息映射(TCP用户端口)$/;"	v
g_net_manage_msg	src/hlnet.c	/^map						*g_net_manage_msg = NULL;				\/\/网络消息映射(TCP管理端口)$/;"	v
g_net_udp_msg	src/hlnet.c	/^map						*g_net_udp_msg = NULL;					\/\/网络消息映射(UDP端口)$/;"	v
g_schedule	uthread/uthread.c	/^schedule_t				*g_schedule = NULL;						\/\/调度器$/;"	v
g_thread	src/database.c	/^thread_t				g_thread = -1;$/;"	v
g_thread_state	src/hlnet.c	/^thread_state_e			g_thread_state = THREAD_STATE_RUNNING;	\/\/线程状态$/;"	v
g_udp_buffer	src/hlnet.c	/^char					*g_udp_buffer = NULL;					\/\/UDP所用缓冲区$/;"	v
g_udp_fd	epollet/epollet.h	/^int 				g_udp_fd = INVALID_SOCKET;				\/\/监听的套接字ID(UDP)$/;"	v
g_udp_reader	epollet/epollet.h	/^udp_reader			g_udp_reader = NULL;					\/\/udp读取函数指针$/;"	v
g_uthread_array	uthread/uthread.c	/^array				 	*g_uthread_array = NULL;				\/\/协程数组$/;"	v
get_client	epollet/client_store.c	/^client_t *get_client(uint32_t id)$/;"	f	signature:(uint32_t id)
get_client	epollet/client_store.h	/^client_t *get_client(uint32_t id);$/;"	p	signature:(uint32_t id)
get_conflict_ratio	bin/include/map.h	/^double get_conflict_ratio(map *map);$/;"	p	signature:(map *map)
get_conflict_ratio	c-stl/map.c	/^double get_conflict_ratio(map *map)$/;"	f	signature:(map *map)
get_conflict_ratio	c-stl/map.h	/^double get_conflict_ratio(map *map);$/;"	p	signature:(map *map)
get_cpu_stat	test/cpu_mem_stat.c	/^int get_cpu_stat(cpu_stat *stat)$/;"	f	signature:(cpu_stat *stat)
get_cpu_stat	test/cpu_mem_stat.h	/^int get_cpu_stat(cpu_stat *stat);$/;"	p	signature:(cpu_stat *stat)
get_mem_stat	test/cpu_mem_stat.c	/^int get_mem_stat(mem_stat *stat)$/;"	f	signature:(mem_stat *stat)
get_mem_stat	test/cpu_mem_stat.h	/^int get_mem_stat(mem_stat *stat);$/;"	p	signature:(mem_stat *stat)
hash	bin/include/map.h	/^    unsigned int (*hash)(char*, int);$/;"	m	struct:_map	access:public
hash	bin/include/map.h	/^unsigned int hash(char *data, int len);\/\/ the default hash function implement.$/;"	p	signature:(char *data, int len)
hash	c-stl/map.c	/^unsigned int hash(char *data, int len)$/;"	f	signature:(char *data, int len)
hash	c-stl/map.h	/^    unsigned int (*hash)(char*, int);$/;"	m	struct:_map	access:public
hash	c-stl/map.h	/^unsigned int hash(char *data, int len);\/\/ the default hash function implement.$/;"	p	signature:(char *data, int len)
hashcode	bin/include/map.h	/^    unsigned int 		hashcode;$/;"	m	struct:_map_entry	access:public
hashcode	c-stl/map.h	/^    unsigned int 		hashcode;$/;"	m	struct:_map_entry	access:public
head	bin/include/list.h	/^    list_item *head;$/;"	m	struct:_list	access:public
head	bin/include/queue.h	/^	int 			head;				\/\/队列头$/;"	m	struct:_queue	access:public
head	c-stl/list.h	/^    list_item *head;$/;"	m	struct:_list	access:public
head	c-stl/makefile	/^head = $(wildcard *.h)$/;"	m
head	c-stl/queue.h	/^	int 			head;				\/\/队列头$/;"	m	struct:_queue	access:public
head	common/common.h	/^	cmd_head_t		head;				\/\/网络数据包头$/;"	m	struct:_packet_head	access:public
head	epollet/makefile	/^head = $(wildcard *.h)$/;"	m
head	src/makefile	/^head = hlnet.h$/;"	m
id	epollet/client_store.h	/^	uint32_t			id;				\/\/套接字对应的内部使用索引号$/;"	m	struct:_client	access:public
id	test/queue_test.c	/^	int id;$/;"	m	struct:student	file:	access:public
id	test/test-array.c	/^    int id;$/;"	m	struct:_stud	file:	access:public
id	test/test-list.c	/^    int id;$/;"	m	struct:sutd	file:	access:public
id	test/test-map.c	/^    int id;$/;"	m	struct:_stud	file:	access:public
in	epollet/client_store.h	/^	buffer				*in;			\/\/读缓冲区$/;"	m	struct:_client	access:public
inited	bin/include/list.h	/^    unsigned char inited;$/;"	m	struct:_list	access:public
inited	c-stl/list.h	/^    unsigned char inited;$/;"	m	struct:_list	access:public
ip	epollet/client_store.h	/^	uint32_t			ip;				\/\/客户端IP地址$/;"	m	struct:_client	access:public
issue_client_msg	src/hlnet.c	/^void issue_client_msg(void *arg)$/;"	f	signature:(void *arg)
issue_manage_msg	src/hlnet.c	/^void issue_manage_msg(void *arg)$/;"	f	signature:(void *arg)
key	bin/include/map.h	/^    char 				*key;$/;"	m	struct:_map_entry	access:public
key	c-stl/map.h	/^    char 				*key;$/;"	m	struct:_map_entry	access:public
key_size	bin/include/map.h	/^    int 				key_size;$/;"	m	struct:_map_entry	access:public
key_size	c-stl/map.h	/^    int 				key_size;$/;"	m	struct:_map_entry	access:public
len	epollet/buffer.h	/^	uint32_t	len;			\/\/数据已占用的总长度$/;"	m	struct:_buffer	access:public
link_hander	common/common.h	/^typedef int (*link_hander)(int client_id, uint32_t ip);$/;"	t
list	bin/include/list.h	/^}list;$/;"	t	typeref:struct:_list
list	c-stl/list.h	/^}list;$/;"	t	typeref:struct:_list
list_find_by_index	bin/include/list.h	/^list_item *list_find_by_index(list *list, int index); \/\/ find by index.$/;"	p	signature:(list *list, int index)
list_find_by_index	c-stl/list.c	/^list_item *list_find_by_index(list *list, int index)$/;"	f	signature:(list *list, int index)
list_find_by_index	c-stl/list.h	/^list_item *list_find_by_index(list *list, int index); \/\/ find by index.$/;"	p	signature:(list *list, int index)
list_foreach	bin/include/list.h	35;"	d
list_foreach	c-stl/list.h	35;"	d
list_free_deep	bin/include/list.h	/^void list_free_deep(list *list);\/\/destroy linkedlist. member is heap mem.$/;"	p	signature:(list *list)
list_free_deep	c-stl/list.c	/^void list_free_deep(list *list)$/;"	f	signature:(list *list)
list_free_deep	c-stl/list.h	/^void list_free_deep(list *list);\/\/destroy linkedlist. member is heap mem.$/;"	p	signature:(list *list)
list_free_shalow	bin/include/list.h	/^void list_free_shalow(list *list);\/\/destroy linkedlist. member is stack mem.$/;"	p	signature:(list *list)
list_free_shalow	c-stl/list.c	/^void list_free_shalow(list *list)$/;"	f	signature:(list *list)
list_free_shalow	c-stl/list.h	/^void list_free_shalow(list *list);\/\/destroy linkedlist. member is stack mem.$/;"	p	signature:(list *list)
list_init	bin/include/list.h	/^void list_init(list *list);$/;"	p	signature:(list *list)
list_init	c-stl/list.c	/^void list_init(list *list)$/;"	f	signature:(list *list)
list_init	c-stl/list.h	/^void list_init(list *list);$/;"	p	signature:(list *list)
list_insert_before	bin/include/list.h	/^int list_insert_before(list *list, int index, void *item);\/\/insert before index.$/;"	p	signature:(list *list, int index, void *item)
list_insert_before	c-stl/list.c	/^int list_insert_before(list *list, int index, void *item)$/;"	f	signature:(list *list, int index, void *item)
list_insert_before	c-stl/list.h	/^int list_insert_before(list *list, int index, void *item);\/\/insert before index.$/;"	p	signature:(list *list, int index, void *item)
list_item	bin/include/list.h	/^}list_item;$/;"	t	typeref:struct:_list_item
list_item	c-stl/list.h	/^}list_item;$/;"	t	typeref:struct:_list_item
list_push_back	bin/include/list.h	/^int list_push_back(list *list, void *item);\/\/insert item at tail.$/;"	p	signature:(list *list, void *item)
list_push_back	c-stl/list.c	/^int list_push_back(list *list, void *item)$/;"	f	signature:(list *list, void *item)
list_push_back	c-stl/list.h	/^int list_push_back(list *list, void *item);\/\/insert item at tail.$/;"	p	signature:(list *list, void *item)
list_remove_by_index	bin/include/list.h	/^list_item *list_remove_by_index(list *list, int index);\/\/ remove by index.$/;"	p	signature:(list *list, int index)
list_remove_by_index	c-stl/list.c	/^list_item *list_remove_by_index(list *list, int index)$/;"	f	signature:(list *list, int index)
list_remove_by_index	c-stl/list.h	/^list_item *list_remove_by_index(list *list, int index);\/\/ remove by index.$/;"	p	signature:(list *list, int index)
list_remove_first	bin/include/list.h	/^list_item *list_remove_first(list *list);\/\/rm head item of list.$/;"	p	signature:(list *list)
list_remove_first	c-stl/list.c	/^list_item *list_remove_first(list *list)$/;"	f	signature:(list *list)
list_remove_first	c-stl/list.h	/^list_item *list_remove_first(list *list);\/\/rm head item of list.$/;"	p	signature:(list *list)
list_remove_last	bin/include/list.h	/^list_item *list_remove_last(list *list);\/\/rm tail item of list.$/;"	p	signature:(list *list)
list_remove_last	c-stl/list.c	/^list_item *list_remove_last(list *list)$/;"	f	signature:(list *list)
list_remove_last	c-stl/list.h	/^list_item *list_remove_last(list *list);\/\/rm tail item of list.$/;"	p	signature:(list *list)
list_size	bin/include/list.h	/^size_t list_size(list *list);\/\/return list's size.$/;"	p	signature:(list *list)
list_size	c-stl/list.c	/^size_t list_size(list *list)$/;"	f	signature:(list *list)
list_size	c-stl/list.h	/^size_t list_size(list *list);\/\/return list's size.$/;"	p	signature:(list *list)
main	test/queue_test.c	/^void main()$/;"	f
main	test/test-array.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-list.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-map.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-stat.c	/^void main()$/;"	f
main	test/test-uthread.c	/^int main()$/;"	f
main	uthread/uthread.h	/^    ucontext_t main;$/;"	m	struct:_schedule_t	access:public
main_dir	Makefile	/^main_dir = .\/src$/;"	m
map	bin/include/map.h	/^}map;$/;"	t	typeref:struct:_map
map	c-stl/map.h	/^}map;$/;"	t	typeref:struct:_map
map_clear	bin/include/map.h	/^void map_clear(map *map);$/;"	p	signature:(map *map)
map_clear	c-stl/map.c	/^void map_clear(map *map)$/;"	f	signature:(map *map)
map_clear	c-stl/map.h	/^void map_clear(map *map);$/;"	p	signature:(map *map)
map_entry	bin/include/map.h	/^} map_entry;$/;"	t	typeref:struct:_map_entry
map_entry	c-stl/map.h	/^} map_entry;$/;"	t	typeref:struct:_map_entry
map_foreach	bin/include/map.h	36;"	d
map_foreach	c-stl/map.h	36;"	d
map_free_deep	bin/include/map.h	/^void map_free_deep(map *map);$/;"	p	signature:(map *map)
map_free_deep	c-stl/map.c	/^void map_free_deep(map *map)$/;"	f	signature:(map *map)
map_free_deep	c-stl/map.h	/^void map_free_deep(map *map);$/;"	p	signature:(map *map)
map_free_shallow	bin/include/map.h	/^void map_free_shallow(map *map);$/;"	p	signature:(map *map)
map_free_shallow	c-stl/map.c	/^void map_free_shallow(map *map)$/;"	f	signature:(map *map)
map_free_shallow	c-stl/map.h	/^void map_free_shallow(map *map);$/;"	p	signature:(map *map)
map_get	bin/include/map.h	/^map_entry *map_get(map *map, char *key, int key_size);$/;"	p	signature:(map *map, char *key, int key_size)
map_get	c-stl/map.c	/^map_entry *map_get(map *map, char *key, int key_size)$/;"	f	signature:(map *map, char *key, int key_size)
map_get	c-stl/map.h	/^map_entry *map_get(map *map, char *key, int key_size);$/;"	p	signature:(map *map, char *key, int key_size)
map_init	bin/include/map.h	/^int map_init(map *map);\/\/init a map.$/;"	p	signature:(map *map)
map_init	c-stl/map.c	/^int map_init(map *map)$/;"	f	signature:(map *map)
map_init	c-stl/map.h	/^int map_init(map *map);\/\/init a map.$/;"	p	signature:(map *map)
map_init_custom	bin/include/map.h	/^void map_init_custom(map *map, size_t spar, unsigned int (*hashfunc)(char*,int));$/;"	p	signature:(map *map, size_t spar, unsigned int (*hashfunc)(char*,int))
map_init_custom	c-stl/map.c	/^void map_init_custom(map *map, size_t spar, unsigned int (*hashfunc)(char*,int))$/;"	f	signature:(map *map, size_t spar, unsigned int (*hashfunc)(char*,int))
map_init_custom	c-stl/map.h	/^void map_init_custom(map *map, size_t spar, unsigned int (*hashfunc)(char*,int));$/;"	p	signature:(map *map, size_t spar, unsigned int (*hashfunc)(char*,int))
map_put	bin/include/map.h	/^int map_put(map *map, char *key, int key_size, void *value);$/;"	p	signature:(map *map, char *key, int key_size, void *value)
map_put	c-stl/map.c	/^int map_put(map *map, char *key, int key_size, void *value)$/;"	f	signature:(map *map, char *key, int key_size, void *value)
map_put	c-stl/map.h	/^int map_put(map *map, char *key, int key_size, void *value);$/;"	p	signature:(map *map, char *key, int key_size, void *value)
map_remove	bin/include/map.h	/^map_entry *map_remove(map *map, char *key, int key_size);$/;"	p	signature:(map *map, char *key, int key_size)
map_remove	c-stl/map.c	/^map_entry *map_remove(map *map, char *key, int key_size)$/;"	f	signature:(map *map, char *key, int key_size)
map_remove	c-stl/map.h	/^map_entry *map_remove(map *map, char *key, int key_size);$/;"	p	signature:(map *map, char *key, int key_size)
map_size	bin/include/map.h	/^size_t map_size(map *map);\/\/return map container size.$/;"	p	signature:(map *map)
map_size	c-stl/map.c	/^size_t map_size(map *map)$/;"	f	signature:(map *map)
map_size	c-stl/map.h	/^size_t map_size(map *map);\/\/return map container size.$/;"	p	signature:(map *map)
max	common/algorithm.h	6;"	d
max_index	uthread/uthread.h	/^    int max_index; 				\/\/ 曾经使用到的最大的index + 1$/;"	m	struct:_schedule_t	access:public
mem_stat	test/cpu_mem_stat.h	/^}mem_stat;$/;"	t	typeref:struct:_mem_stat
min	common/algorithm.h	7;"	d
name	test/queue_test.c	/^	char* name;$/;"	m	struct:student	file:	access:public
name	test/test-array.c	/^    char *name;$/;"	m	struct:_stud	file:	access:public
name	test/test-list.c	/^    char *name;$/;"	m	struct:sutd	file:	access:public
name	test/test-map.c	/^    char *name;$/;"	m	struct:_stud	file:	access:public
need	epollet/client_store.h	/^	uint16_t			need;			\/\/未读完的字节数$/;"	m	struct:_read_status	access:public
next	bin/include/list.h	/^    struct _list_item *next;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
next	bin/include/map.h	/^    struct _map_entry 	*next;$/;"	m	struct:_map_entry	typeref:struct:_map_entry::_map_entry	access:public
next	c-stl/list.h	/^    struct _list_item *next;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
next	c-stl/map.h	/^    struct _map_entry 	*next;$/;"	m	struct:_map_entry	typeref:struct:_map_entry::_map_entry	access:public
obj	c-stl/makefile	/^obj = $(addprefix $(obj_dir)\/, $(obj_name))$/;"	m
obj	epollet/makefile	/^obj = $(addprefix $(obj_dir)\/, $(obj_name))$/;"	m
obj	src/makefile	/^obj = $(src:%.c=%.o)$/;"	m
obj	uthread/makefile	/^obj = $(addprefix $(obj_dir)\/, $(obj_name))$/;"	m
obj_dir	c-stl/makefile	/^obj_dir = ..\/obj$/;"	m
obj_dir	epollet/makefile	/^obj_dir = ..\/obj$/;"	m
obj_dir	uthread/makefile	/^obj_dir = ..\/obj$/;"	m
obj_name	c-stl/makefile	/^obj_name = $(src:%.c=%.o)$/;"	m
obj_name	epollet/makefile	/^obj_name = $(src:%.c=%.o)$/;"	m
obj_name	uthread/makefile	/^obj_name = $(src:%.c=%.o)$/;"	m
out	epollet/client_store.h	/^	buffer				*out;			\/\/写缓冲区$/;"	m	struct:_client	access:public
packet_head_t	common/common.h	/^}packet_head_t, *ppacket_head;$/;"	t	typeref:struct:_packet_head
parameter	uthread/uthread.c	/^	void				*parameter;			\/\/参数$/;"	m	struct:_uthread_arg	file:	access:public
parent	epollet/client_store.h	/^	int 				parent;			\/\/所属的父文件描述符$/;"	m	struct:_client	access:public
part	epollet/client_store.h	/^	uint8_t				part;			\/\/正在读的部分，参见枚举：read_status_e$/;"	m	struct:_read_status	access:public
pbuffer	epollet/buffer.h	/^}buffer, *pbuffer;$/;"	t	typeref:struct:_buffer
pclient	epollet/client_store.h	/^}client_t, *pclient;$/;"	t	typeref:struct:_client
pcmd_head	common/common.h	/^}cmd_head_t, *pcmd_head;$/;"	t	typeref:struct:_cmd_head
pdbqueue_item_t	src/database.h	/^}dbqueue_item_t, *pdbqueue_item_t;$/;"	t	typeref:struct:_dbqueue_item
post_db_msg	src/database.c	/^int post_db_msg(uint16_t msg, char *data, int len)$/;"	f	signature:(uint16_t msg, char *data, int len)
post_db_msg	src/database.h	/^int post_db_msg(uint16_t msg, char *data, int len);$/;"	p	signature:(uint16_t msg, char *data, int len)
ppacket_head	common/common.h	/^}packet_head_t, *ppacket_head;$/;"	t	typeref:struct:_packet_head
pread_status	epollet/client_store.h	/^}read_status_t, *pread_status;$/;"	t	typeref:struct:_read_status
prev	bin/include/list.h	/^    struct _list_item *prev;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
prev	c-stl/list.h	/^    struct _list_item *prev;$/;"	m	struct:_list_item	typeref:struct:_list_item::_list_item	access:public
proto_ver	common/common.h	/^	uint16_t		proto_ver;			\/\/协议版本号$/;"	m	struct:_cmd_head	access:public
puts	bin/include/map.h	/^    size_t puts; \/\/ put operate times.$/;"	m	struct:_map	access:public
puts	c-stl/map.h	/^    size_t puts; \/\/ put operate times.$/;"	m	struct:_map	access:public
queue	bin/include/queue.h	/^}queue;$/;"	t	typeref:struct:_queue
queue	c-stl/queue.h	/^}queue;$/;"	t	typeref:struct:_queue
queue_back	bin/include/queue.h	32;"	d
queue_back	c-stl/queue.h	32;"	d
queue_empty	bin/include/queue.h	30;"	d
queue_empty	c-stl/queue.h	30;"	d
queue_foreach	bin/include/queue.h	35;"	d
queue_foreach	c-stl/queue.h	35;"	d
queue_free_deep	bin/include/queue.h	/^void queue_free_deep(queue* queue);$/;"	p	signature:(queue* queue)
queue_free_deep	c-stl/queue.c	/^void queue_free_deep(queue* queue)$/;"	f	signature:(queue* queue)
queue_free_deep	c-stl/queue.h	/^void queue_free_deep(queue* queue);$/;"	p	signature:(queue* queue)
queue_free_shallow	bin/include/queue.h	/^void queue_free_shallow(queue* queue);$/;"	p	signature:(queue* queue)
queue_free_shallow	c-stl/queue.c	/^void queue_free_shallow(queue* queue)$/;"	f	signature:(queue* queue)
queue_free_shallow	c-stl/queue.h	/^void queue_free_shallow(queue* queue);$/;"	p	signature:(queue* queue)
queue_front	bin/include/queue.h	31;"	d
queue_front	c-stl/queue.h	31;"	d
queue_init	bin/include/queue.h	/^int queue_init(queue *queue, uint32_t capacity);$/;"	p	signature:(queue *queue, uint32_t capacity)
queue_init	c-stl/queue.c	/^int queue_init(queue *queue, uint32_t capacity)$/;"	f	signature:(queue *queue, uint32_t capacity)
queue_init	c-stl/queue.h	/^int queue_init(queue *queue);$/;"	p	signature:(queue *queue)
queue_pop	bin/include/queue.h	/^void* queue_pop(queue *queue);$/;"	p	signature:(queue *queue)
queue_pop	c-stl/queue.c	/^void* queue_pop(queue *queue)$/;"	f	signature:(queue *queue)
queue_pop	c-stl/queue.h	/^void* queue_pop(queue *queue);$/;"	p	signature:(queue *queue)
queue_push	bin/include/queue.h	/^int queue_push(queue *queue, void *item);$/;"	p	signature:(queue *queue, void *item)
queue_push	c-stl/queue.c	/^int queue_push(queue *queue, void *item)$/;"	f	signature:(queue *queue, void *item)
queue_push	c-stl/queue.h	/^int queue_push(queue *queue, void *item);$/;"	p	signature:(queue *queue, void *item)
queue_push_fixed	bin/include/queue.h	/^int queue_push_fixed(queue* queue, void* item);$/;"	p	signature:(queue* queue, void* item)
queue_push_fixed	c-stl/queue.c	/^int queue_push_fixed(queue* queue, void* item)$/;"	f	signature:(queue* queue, void* item)
queue_push_fixed	c-stl/queue.h	/^int queue_push_fixed(queue* queue, void* item);$/;"	p	signature:(queue* queue, void* item)
queue_size	bin/include/queue.h	29;"	d
queue_size	c-stl/queue.h	29;"	d
read	epollet/buffer.h	/^	uint32_t	read;			\/\/读索引$/;"	m	struct:_buffer	access:public
read_data	epollet/epollet.c	/^int read_data(struct epoll_event *ev, client_t *cli, buffer *global_buf)$/;"	f	signature:(struct epoll_event *ev, client_t *cli, buffer *global_buf)
read_part_e	epollet/client_store.h	/^enum read_part_e$/;"	g
read_ptr	epollet/buffer.h	16;"	d
read_status_t	epollet/client_store.h	/^}read_status_t, *pread_status;$/;"	t	typeref:struct:_read_status
recycle_client	epollet/client_store.c	/^void recycle_client(client_t *cli)$/;"	f	signature:(client_t *cli)
recycle_client	epollet/client_store.h	/^void recycle_client(client_t *cli);$/;"	p	signature:(client_t *cli)
reg_db_msg	bin/include/hlnet.h	/^int reg_db_msg(uint16_t msg, dbmsg_hander func);$/;"	p	signature:(uint16_t msg, dbmsg_hander func)
reg_db_msg	src/database.c	/^int reg_db_msg(uint16_t msg, dbmsg_hander func)$/;"	f	signature:(uint16_t msg, dbmsg_hander func)
reg_db_msg	src/database.h	/^int reg_db_msg(uint16_t msg, dbmsg_hander func);$/;"	p	signature:(uint16_t msg, dbmsg_hander func)
reg_link_event	bin/include/hlnet.h	/^int reg_link_event(sock_type_e type, link_hander func);$/;"	p	signature:(sock_type_e type, link_hander func)
reg_link_event	src/hlnet.c	/^int reg_link_event(sock_type_e type, link_hander func)$/;"	f	signature:(sock_type_e type, link_hander func)
reg_link_event	src/hlnet.h	/^int reg_link_event(sock_type_e type, link_hander func);$/;"	p	signature:(sock_type_e type, link_hander func)
reg_net_msg	src/hlnet.c	/^int reg_net_msg(sock_type_e sock_type, uint16_t msg, tcpmsg_hander func)$/;"	f	signature:(sock_type_e sock_type, uint16_t msg, tcpmsg_hander func)
reg_shut_event	bin/include/hlnet.h	/^int reg_shut_event(sock_type_e type, shut_hander func);$/;"	p	signature:(sock_type_e type, shut_hander func)
reg_shut_event	src/hlnet.c	/^int reg_shut_event(sock_type_e type, shut_hander func)$/;"	f	signature:(sock_type_e type, shut_hander func)
reg_shut_event	src/hlnet.h	/^int reg_shut_event(sock_type_e type, shut_hander func);$/;"	p	signature:(sock_type_e type, shut_hander func)
reg_tcp_msg	bin/include/hlnet.h	/^int reg_tcp_msg(sock_type_e sock_type, uint16_t msg, tcpmsg_hander func);$/;"	p	signature:(sock_type_e sock_type, uint16_t msg, tcpmsg_hander func)
reg_tcp_msg	src/hlnet.h	/^int reg_tcp_msg(sock_type_e sock_type, uint16_t msg, tcpmsg_hander func);$/;"	p	signature:(sock_type_e sock_type, uint16_t msg, tcpmsg_hander func)
reg_udp_msg	bin/include/hlnet.h	/^int reg_udp_msg(uint16_t msg, udpmsg_hander func);$/;"	p	signature:(uint16_t msg, udpmsg_hander func)
reg_udp_msg	src/hlnet.c	/^int reg_udp_msg(uint16_t msg, udpmsg_hander func)$/;"	f	signature:(uint16_t msg, udpmsg_hander func)
reg_udp_msg	src/hlnet.h	/^int reg_udp_msg(uint16_t msg, udpmsg_hander func);$/;"	p	signature:(uint16_t msg, udpmsg_hander func)
reserve	epollet/client_store.h	/^	uint8_t				reserve;		\/\/保留字段 $/;"	m	struct:_read_status	access:public
running_thread	uthread/uthread.h	/^    int running_thread;$/;"	m	struct:_schedule_t	access:public
safe_free	common/algorithm.h	13;"	d
schedule	uthread/uthread.c	/^	schedule_t			*schedule;			\/\/所属调度器$/;"	m	struct:_uthread_arg	file:	access:public
schedule_create	uthread/uthread.c	/^int schedule_create()$/;"	f
schedule_create	uthread/uthread.h	/^int schedule_create();$/;"	p	signature:()
schedule_finished	uthread/uthread.c	/^int schedule_finished(const schedule_t *schedule)$/;"	f	signature:(const schedule_t *schedule)
schedule_finished	uthread/uthread.h	/^int  schedule_finished(const schedule_t *schedule);$/;"	p	signature:(const schedule_t *schedule)
schedule_t	uthread/uthread.h	/^}schedule_t;$/;"	t	typeref:struct:_schedule_t
schedule_test	test/test-uthread.c	/^void schedule_test()$/;"	f
score	test/queue_test.c	/^	int score;$/;"	m	struct:student	file:	access:public
score	test/test-array.c	/^    int score;$/;"	m	struct:_stud	file:	access:public
score	test/test-map.c	/^    int score;$/;"	m	struct:_stud	file:	access:public
seek_read	epollet/buffer.h	21;"	d
seek_write	epollet/buffer.h	30;"	d
serv_create	bin/include/hlnet.h	/^int serv_create();$/;"	p	signature:()
serv_create	src/hlnet.c	/^int serv_create()$/;"	f
serv_create	src/hlnet.h	/^int serv_create();$/;"	p	signature:()
serv_ctl	bin/include/hlnet.h	/^int serv_ctl(sock_type_e sock_type, short port);$/;"	p	signature:(sock_type_e sock_type, short port)
serv_ctl	src/hlnet.c	/^int serv_ctl(sock_type_e sock_type, short port)$/;"	f	signature:(sock_type_e sock_type, short port)
serv_ctl	src/hlnet.h	/^int serv_ctl(sock_type_e sock_type, short port);$/;"	p	signature:(sock_type_e sock_type, short port)
serv_run	bin/include/hlnet.h	/^int serv_run();$/;"	p	signature:()
serv_run	src/hlnet.c	/^int serv_run()$/;"	f
serv_run	src/hlnet.h	/^int serv_run();$/;"	p	signature:()
show_cpu_mem_stat	test/test-uthread.c	/^void show_cpu_mem_stat()$/;"	f
shut_hander	common/common.h	/^typedef int (*shut_hander)(int client_id);$/;"	t
size	bin/include/array.h	/^    size_t size;$/;"	m	struct:_array	access:public
size	bin/include/queue.h	/^	int 			size;				\/\/已使用大小$/;"	m	struct:_queue	access:public
size	c-stl/array.h	/^    size_t size;$/;"	m	struct:_array	access:public
size	c-stl/queue.h	/^	int 			size;				\/\/已使用大小$/;"	m	struct:_queue	access:public
size	epollet/buffer.h	/^	uint32_t	size;			\/\/缓冲区大小$/;"	m	struct:_buffer	access:public
skip_token	test/cpu_mem_stat.c	8;"	d	file:
sock_type_e	bin/include/hlnet.h	/^}sock_type_e;$/;"	t	typeref:enum:__anon1
sock_type_e	src/hlnet.h	/^}sock_type_e;$/;"	t	typeref:enum:__anon2
src	c-stl/makefile	/^src = $(wildcard *.c)$/;"	m
src	epollet/makefile	/^src = $(wildcard *.c)$/;"	m
src	src/makefile	/^src = $(wildcard *.c)$/;"	m
src	uthread/makefile	/^src = $(wildcard *.c)$/;"	m
stack	uthread/uthread.h	/^    char stack[DEFAULT_STACK_SZIE];$/;"	m	struct:uthread_t	access:public
start_dbthread	src/database.c	/^int start_dbthread()$/;"	f
start_dbthread	src/database.h	/^int start_dbthread();$/;"	p	signature:()
state	uthread/uthread.h	/^    enum uthread_state state;$/;"	m	struct:uthread_t	typeref:enum:uthread_t::uthread_state	access:public
status	epollet/client_store.h	/^	read_status_t		status;			\/\/读状态$/;"	m	struct:_client	access:public
stud_t	test/test-array.c	/^}stud_t;$/;"	t	typeref:struct:_stud	file:
stud_t	test/test-list.c	/^}stud_t;$/;"	t	typeref:struct:sutd	file:
stud_t	test/test-map.c	/^}stud_t;$/;"	t	typeref:struct:_stud	file:
student	test/queue_test.c	/^struct student$/;"	s	file:
student::id	test/queue_test.c	/^	int id;$/;"	m	struct:student	file:	access:public
student::name	test/queue_test.c	/^	char* name;$/;"	m	struct:student	file:	access:public
student::score	test/queue_test.c	/^	int score;$/;"	m	struct:student	file:	access:public
sutd	test/test-list.c	/^typedef struct sutd$/;"	s	file:
sutd::AS_LIST_ITEM	test/test-list.c	/^    AS_LIST_ITEM;$/;"	m	struct:sutd	file:	access:public
sutd::id	test/test-list.c	/^    int id;$/;"	m	struct:sutd	file:	access:public
sutd::name	test/test-list.c	/^    char *name;$/;"	m	struct:sutd	file:	access:public
table	bin/include/array.h	/^    void **table;$/;"	m	struct:_array	access:public
table	bin/include/map.h	/^    map_entry **table;$/;"	m	struct:_map	access:public
table	bin/include/queue.h	/^	void 			**table;			\/\/队列数据区$/;"	m	struct:_queue	access:public
table	c-stl/array.h	/^    void **table;$/;"	m	struct:_array	access:public
table	c-stl/map.h	/^    map_entry **table;$/;"	m	struct:_map	access:public
table	c-stl/queue.h	/^	void 			**table;			\/\/队列数据区$/;"	m	struct:_queue	access:public
table_size	bin/include/map.h	/^    unsigned int table_size;$/;"	m	struct:_map	access:public
table_size	c-stl/map.h	/^    unsigned int table_size;$/;"	m	struct:_map	access:public
tail	bin/include/list.h	/^    list_item *tail;$/;"	m	struct:_list	access:public
tail	bin/include/queue.h	/^	int 			tail;				\/\/队列尾$/;"	m	struct:_queue	access:public
tail	c-stl/list.h	/^    list_item *tail;$/;"	m	struct:_list	access:public
tail	c-stl/queue.h	/^	int 			tail;				\/\/队列尾$/;"	m	struct:_queue	access:public
target	Makefile	/^target = bin\/lib\/hlnet.so$/;"	m
target	c-stl/makefile	/^target = ..\/lib\/libcstl.a$/;"	m
target	epollet/makefile	/^target = ..\/lib\/libepollet.a$/;"	m
target	uthread/makefile	/^target = ..\/lib\/libuthread.a$/;"	m
targets	test/Makefile	/^targets = queue_test test-array test-uthread$/;"	m
tcp_accept	epollet/epollet.c	/^static void tcp_accept(int fd)$/;"	f	file:	signature:(int fd)
tcp_read	epollet/epollet.c	/^static void tcp_read(struct epoll_event *ev)$/;"	f	file:	signature:(struct epoll_event *ev)
tcp_send	bin/include/hlnet.h	/^int tcp_send(uint32_t client_id, uint16_t cmd, char *data, uint32_t len);$/;"	p	signature:(uint32_t client_id, uint16_t cmd, char *data, uint32_t len)
tcp_send	src/hlnet.c	/^int tcp_send(uint32_t client_id, uint16_t cmd, char *data, uint32_t len)$/;"	f	signature:(uint32_t client_id, uint16_t cmd, char *data, uint32_t len)
tcp_send	src/hlnet.h	/^int tcp_send(uint32_t client_id, uint16_t cmd, char *data, uint32_t len);$/;"	p	signature:(uint32_t client_id, uint16_t cmd, char *data, uint32_t len)
tcpmsg_hander	common/common.h	/^typedef int (*tcpmsg_hander)(int client_id, cmd_head_t *head, char *data);$/;"	t
test_queue	test/queue_test.c	/^int test_queue()$/;"	f
thread_state_e	src/hlnet.c	/^}thread_state_e;$/;"	t	typeref:enum:_thread_state	file:
threads	uthread/uthread.h	/^    uthread_t *threads;$/;"	m	struct:_schedule_t	access:public
total	test/cpu_mem_stat.h	/^	uint32_t total;		\/\/总大小$/;"	m	struct:_mem_stat	access:public
udp_read	src/hlnet.c	/^static void udp_read(int fd)$/;"	f	file:	signature:(int fd)
udp_reader	epollet/epollet.h	/^typedef void (*udp_reader)(int fd);$/;"	t
udp_send	bin/include/hlnet.h	/^int udp_send(uint32_t ip, uint16_t port, uint16_t cmd, char *data, uint32_t len);$/;"	p	signature:(uint32_t ip, uint16_t port, uint16_t cmd, char *data, uint32_t len)
udp_send	src/hlnet.c	/^int udp_send(uint32_t ip, uint16_t port, uint16_t cmd, char *data, uint32_t len)$/;"	f	signature:(uint32_t ip, uint16_t port, uint16_t cmd, char *data, uint32_t len)
udp_send	src/hlnet.h	/^int udp_send(uint32_t ip, uint16_t port, uint16_t cmd, char *data, uint32_t len);$/;"	p	signature:(uint32_t ip, uint16_t port, uint16_t cmd, char *data, uint32_t len)
udpmsg_hander	common/common.h	/^typedef int (*udpmsg_hander)(uint32_t ip, uint16_t port, cmd_head_t *head, char *data);$/;"	t
usage	test/cpu_mem_stat.h	/^	uint32_t usage;		\/\/已用时间$/;"	m	struct:_cpu_stat	access:public
uthread_add	uthread/uthread.c	/^int uthread_add(int id)$/;"	f	signature:(int id)
uthread_add	uthread/uthread.h	/^int uthread_add(int id);$/;"	p	signature:(int id)
uthread_arg_t	uthread/uthread.c	/^}uthread_arg_t;$/;"	t	typeref:struct:_uthread_arg	file:
uthread_body	uthread/uthread.c	/^void uthread_body(schedule_t *ps)$/;"	f	signature:(schedule_t *ps)
uthread_body	uthread/uthread.h	/^static void uthread_body(schedule_t *ps);$/;"	p	signature:(schedule_t *ps)
uthread_create	uthread/uthread.c	/^int uthread_create(Fun func)$/;"	f	signature:(Fun func)
uthread_create	uthread/uthread.h	/^int uthread_create(Fun func);$/;"	p	signature:(Fun func)
uthread_dir	Makefile	/^uthread_dir = .\/uthread$/;"	m
uthread_resume	uthread/uthread.c	/^void uthread_resume(schedule_t *schedule, int id)$/;"	f	signature:(schedule_t *schedule, int id)
uthread_resume	uthread/uthread.h	/^void uthread_resume(schedule_t *schedule, int id);$/;"	p	signature:(schedule_t *schedule, int id)
uthread_run	uthread/uthread.c	/^int uthread_run()$/;"	f
uthread_run	uthread/uthread.h	/^int uthread_run();$/;"	p	signature:()
uthread_sleep	uthread/uthread.c	/^void uthread_sleep(schedule_t* schedule, int msec)$/;"	f	signature:(schedule_t* schedule, int msec)
uthread_sleep	uthread/uthread.h	/^void uthread_sleep(schedule_t* schedule, int msec);$/;"	p	signature:(schedule_t* schedule, int msec)
uthread_state	uthread/uthread.h	/^enum uthread_state$/;"	g
uthread_t	uthread/uthread.h	/^typedef struct uthread_t$/;"	s
uthread_t	uthread/uthread.h	/^}uthread_t;$/;"	t	typeref:struct:uthread_t
uthread_t::arg	uthread/uthread.h	/^    void *arg;$/;"	m	struct:uthread_t	access:public
uthread_t::ctx	uthread/uthread.h	/^    ucontext_t ctx;$/;"	m	struct:uthread_t	access:public
uthread_t::func	uthread/uthread.h	/^    Fun func;$/;"	m	struct:uthread_t	access:public
uthread_t::stack	uthread/uthread.h	/^    char stack[DEFAULT_STACK_SZIE];$/;"	m	struct:uthread_t	access:public
uthread_t::state	uthread/uthread.h	/^    enum uthread_state state;$/;"	m	struct:uthread_t	typeref:enum:uthread_t::uthread_state	access:public
uthread_yield	uthread/uthread.c	/^void uthread_yield(schedule_t *schedule)$/;"	f	signature:(schedule_t *schedule)
uthread_yield	uthread/uthread.h	/^void uthread_yield(schedule_t *schedule);$/;"	p	signature:(schedule_t *schedule)
write	epollet/buffer.h	/^	uint32_t	write;			\/\/写索引$/;"	m	struct:_buffer	access:public
write_ptr	epollet/buffer.h	18;"	d
zero	common/algorithm.h	9;"	d
zero_array	common/algorithm.h	10;"	d
