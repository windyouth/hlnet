
//----------------------升级计划------------------------//

* 完成相对时间定时器、绝对时间定时器。      |已完成
* 将socket定时检查换成新实现的定时器。      |已完成
* 取消双if，涉及到数据库和日志模块对buffer对象的调用。        |已完成
* 取消装载网络消息的总队列，改为放在各个client的输入buffer中，并加一个就绪(ready)链表，这样既能解决大并发时的内存分配问题，又能减少一次拷贝，从而让整个网络库实现真正数据零拷贝。            |已完成
* 将client用词换成user，user表示用户端，manage表示管理端，让概念更明确。
* 将用户端和管理端各全局参数打包成结构体，使其更简洁，方便使用。
* 将数据格式提取出来，让网络库成为无格式的，以适用于所有的网络服务器。
  格式部分代码作为外层插件放入plugin中，作为解析层，解析层向底层注册格式解析函数。应用层注册消息处理函数到解析层。
  接收消息时的need值从外面传入，启动前传一个初始值，后续每次处理消息完成后传下一次need值进去。底层每次把网络数据接收完，然后判断是否大于need值，如果大于则放入就绪链表。
  两个消息分发协程，遍历就绪链表，协程调用解析层注册的函数指针对缓冲区的数据进行判断和处理。数据包满足条件后调用应用层注册的函数指针，通知应用层。
* client结构体的part值不再用枚举，而是用一个byte记录状态。哪些状态由解析层或应用层自己定，可支持256种状态。
* 内存池增加一种模式，针对小块内存申请，一次性给予一大块，再分成多个小份。

//----------------------插件库扩展计划------------------------//

* 吸收tinyhttpd的部分代码，增加HTTP服务器的功能。
* 引入openssl库，集成SSL加密功能。
* 封装原子数据类型
* 引入probuffer的pbc库
* 引入封装的cjson库
* 参照cjson的设计思路，重写libconfig库部分代码，改进性能，减少代码量。

