问：这个网络库适用于哪些场景？
答：适用于业务可拆分成微服务，且使用自定义网络协议的场景。如：棋牌、休闲类游戏，
	APP应用。不适用于单进程承接超大并发的场景：如大型在线即时战斗游戏，
	不适用于使用标准协议的场景：如http服务器、ftp服务器等。

问：这个C语言库，为什么函数和结构体都不加前缀？
答：不太想加前缀。这是个开源库，用户如果在使用的过程中出现了命名冲突的情况，
	可自行添加宏进行区分，我就不加前缀了。

问：库中用安全套接字的方式来验证连接的合法性，能保证安全吗？
答：安全套接字检测，可在传输层保证安全。如果黑客在IP层发送欺骗数据包，
	可在应用层进行加密和完整性验证。

问：可以监听管理端口，用于服务进程间通信。那么用此网络库做出的服务器架构是怎样的？
答：网络库只提供服务器间通信的功能和接口，至于应用层的服务器集群采用什么拓扑结构，
    这个选择权在应用层，可以是星形结构、也可以是网状结构等。

问：为什么工作线程只有一个？
答：这是基于微服务的，微服务的思想是将业务进行拆分，用多进程和协程来代替多线程。这样既能充分利用多核的并行计算优势，又能利用协程将单核的性能压榨到极致，因为相当大的程度上省去了线程切换和锁竞争的性能损耗。另外如果要访问数据库，会新开一个线程，就是两个工作线程哈。

问：为何不将IO吞吐和业务处理分在两个线程中？
答：基于上一个问题的回答。同时如果IO吞吐和业务处理分在两个线程中，当IO很大、业务处理很小或者是业务处理很大、IO吞吐相对较少的时候，会出现线程任务分配不均的状况，增加线程空转带来的CPU消耗，无法将CPU性能压榨到极致。合在一个线程可避免此问题，并且在业务进行了合理拆分、微服务的场景下，也不存在并发量太大，承载力不足的问题。
